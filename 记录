# Vue-v-2.0
Learn Vue -version 2.0
@Linke Vue官方教程网站: https://cn.vuejs.org/v2/guide/

@Time 2020.2.21
一、初识Vue
  1.1.认识vue.js
    1.1.1.vue的渐进式
    1.1.2.vue的声明式渲染,所有东西都是响应式的
    1.1.3.vue的特点
		
  1.2.安装vue
    1.2.1.CDN引入
    1.2.2.下载vue.js
    1.2.3.npm安装
		
  1.3.vue的初体验
    1.3.1.helloVue:Mustache语法-> 体验vue的响应式
    1.3.2.Vue的列表展示:v-for
    1.3.3.计数器:案件监听-> methods-> @click
		
  1.4.vue中的MVVM
    MODEL->VIEW->VIEW->MODEL
		
  1.5.vue中的options对象
    1.5.1.el:
    1.5.2.data:
    1.5.3.methods:
    1.5.4.生命周期函数:
    .................
    
二、插值语法
  2.1.Mustache语法
  2.2.v-once 表示元素和组件只渲染一次
  2.3.v-html 渲染便签内容
  2.4.v-text 与Mustache语法差不多,但不够灵活,一般不用
  2.5.v-pre{{}} 显示渲染前的内容
  2.5.v-cloak  斗篷
  
三、V-bind
  3.1.v-bind绑定基本属性
    3.1.1.v-bind:src
    3.1.2.v-bink:href
		
  3.2.v-bind动态绑定class
    3.2.1.对象语法-> :class="{类名:boolean}"
    3.2.2.数组语法-> :class="[类名变量1,类名变量2]"
		
  3.3.v-bind动态绑定style
    3.3.1.对象语法-> :style="{css属性名:css属性值}"
    3.3.2.数组语法-> :style="[css对象1,css对象2]"


@Time 2020.02.22
四、计算属性(很重要)
  4.1.计算属性本质
		fullname:{set(),get()};
		
	4.2.计算属性和methods对比
		4.2.1.计算属性在多次使用时只会调用一次
		4.2.2.有缓存的

五、事件监听
	5.1.事件监听基本使用
		v-on的使用
		语法糖@
		
	5.2.参数问题
		5.2.1.btnClick 可以省略
		5.2.2.要求传参数却省略的话,默认传递浏览器生成的event事件
		5.2.3.可以通过$event,传递event事件进行处理
		
	5.3.修饰符
		stop 阻止事件冒泡
		prevent 阻止默认事件
		keycode 监听键盘按键
		once 只回调一次,只有第一次点有反应,再点则没有反应
	
六、条件判断
	6.1.v-if/v-else-if/v-else使用
	
	6.2.使用条件判读做切换功能案例
		注意Vue的优化策略带来的小问题,需要使用key进行标记
	
	6.3.v-show
		功能上与v-if差不多,但区别在于两者都为false时,采用的方式不同
	
七、循环遍历
	7.1.遍历数组
	
	7.2.遍历对象
	
	7.3.数组响应式的方法
		1.push方法 在数组的最后面添加元素,可以同时添加多个元素,用逗号隔开
		2.pop() 把最后一个元素删除掉
		3.shift() 把第一个元素删除掉
		4.unshift() 在数组的最前面添加元素,可以同时添加多个元素,用逗号隔开
		5.splice(start,) 删除元素/插入元素/替换元素
		6.sort() 排序
		7.reverse() 反转
		8.Vue.set(要修改的对象,索引值,修改后的值)
		9.Vue.delete(要修改的对象,要删除的属性)
		
八、书籍购物车小案例
	8.1.编程格式及规范
	
	8.2.函数式编程中对于高阶函数的学习与使用
		函数式编程:第一公民:函数_高阶函数:filter/map/reduce */
			1.filter 对数组中的所有内容进行判断处理,返回一个新的数组
			2.map	对数组中的所有内容进行业务逻辑处理,返回一个新的数组
			3.reduce 对数组中的所有内容进行汇总
			
九、	v-model的使用
	9.1.v-model的本质
		v-model其实是一个语法糖,背后本质是包含两个操作
		1.v-bind绑定一个value值
		2.v-on指令给当前元素绑定一个事件
		
	9.2.v-model和radio/checkbox/select
	
	9.3.v-model修饰符
		1.lazy 只有在失去焦点或按下回车键才会更新	
		2.number 将默认情况下string类型改为number
		3.trim 剥除字符串两边空格
		
十、组件化开发
	10.1.认识组件化
		用独立可复用的小组件来构建大型应用，开发效率更快更敏捷,更好地复用.
		
	10.2.组件的基本使用
		组件使用步骤:
			1.创建组件构造器对象
			2.注册组件
			3.直接使用
			
	10.3.全局组件和局部组件
		差异在于作用范围的不同
		全局组件:可在当前所有vue实例下使用
		局部组件:仅在当前注册的实例下使用
		
	10.4.父组件和子组件
		一个组件里面可以注册另一个组件
		则形成了父子关系
		Vue实例本质上是根组件,及所有组件的父组件
		
	10.5.注册组件的语法糖
		Vue.extend()被省略,但本质上底层还是调用的这个方法
		
	10.6.组件模板的分离写法
		1.script标签,类型必须是text/x-template,通过id绑定
		2.template标签,通过id绑定
		
	10.7.组件数据存放
		1.子组件不能直接访问父组件中的数据
		2.子组件中有自己的data,并且是一个函数,返回的是一个对象
			组件可以进行复用,但data数据都是同一个,如果不是函数,那么不同组件在操作data时,会互相影响.
			函数内部是封闭的,不同的组件在编译时,会产生自己的对象,进行操作的时候,不会影响到其他组件.
			
	10.8.父子组件中间的通讯
		10.8.1.父传子(props)
			必须用v-bind绑定,Vue才会将其看作变量去寻找
			props可以作为数组,也可以作为对象,对象的好处是可以进行类型验证等
			
		10.8.2.子传父(自定义事件)
			子组件通过methods发射自定义事件给父组件
				this.$emit('itemclick',item);
			父组件通过v-on监听,并通过自己的methods进行业务处理
				<cpn @itemclick="cpnClick"></cpn>
				默认接收传过来的参数
				cpnClick(item) {
						console.log(item);
				}
				
	10.9.父子组件的访问
		10.9.1.父访问子
			1.$children,获取子组件数组,一般用的比较少
			2.$refs=>对象类型,默认是一个空对象,父组件中子组件标签必须使用ref=''进行声明
			
		10.9.2.子访问父
			1.访问父组件$parent
			2.访问根组件$root
			
十一、组件化高级
	11.1.slot插槽的基本使用
		1.在组件中定义<solt></slot>标签
		2.插槽的默认值
		3.如果有多个值同时放入组件中替换时,会一起作为替换元素替换掉
		一句话总结:
			父组件替换插槽的标签,但是内容由子组件来提供
			
	11.2.slot具名插槽的使用
		一个插槽无法满足业务需求,因此有了多个插槽进行具名的使用
		
	11.3.编译的作用域
		父组件模板的所有东西都会在父级作用域里编译
		子组件模板的所有东西都会在子级作用域里编译
		
	11.4.作用于插槽的案例
	
十二、前端模块化
	12.1.为什么要使用模块化
		1.简单写js带来的问题
		2.闭包引起代码不可复用
		3.自己实现了简单的模块化
		4.AMD/CMD/CommonJS/ES6
		
	12.2.ES6中模块化的使用
		export
		import
		
十三、webpack
	13.1.什么是webpack
		1.webpack和gulp对比
		2.webpack依赖环境(node)
		3.webpack的安装
		
	13.2.webpack的起步
		13.2.1.webpack的命令
			webpack ./src/main.js ./dist/bundle.js 
			将前面的js文件打包到后面的文件中
				
		13.2.2.webpack的配置
			webpack.config.js/package.json(scripts)
			
	13.3.webpackdeloader
		1.css-loader/style-loader
			负责加载css文件/负责将样式添加到DOM中
		2.less-loader/less
			less文件的处理
		3.url-loader/file-loader
			对图片的处理/处理大于limit限制的
		4.babel-loader
			ES6->ES5
			
	13.4.webpack配置vue
		1.vue代码/文件的抽离
		2.vue-loader加载vue
		
	13.5.webpack的插件
	
	13.6.搭建本地服务器
		webpack-dev-server
		
	13.7.配置文件分离
	
十四、Vue VLI
	14.1.什么是CLI
		脚手架是什么东西
		CLI依赖webpack,node,npm
		安装CLI ->npm install -g @vue/cli
		拉取2.x版本->npm install -g @vue/cli-init
		
	14.2.runtime-compiler和runtime-only区别
		1.runtime-compiler:
			template->ast->render->vdom->UI
		
		2.runtime-only(性能更高,代码量更少):
			render->vdom->UI
			
			render:(h) => h(App); h -> createElement
			
十五、Vue-Router
	15.1.什么是前端路由(前端进行管理的一套映射关系)
		1.后端渲染/前端渲染
		2.前后端分离
		3.SPA/前端路由
		
	15.2.路由的基本配置
		1.安装vue-router
		2.Vue.user -> 创建VueRouter对象 -> 挂载到Vue实例上
		3.配置映射关系	
			3.1.创建组件
			3.2.配置映射关系
			3.3.使用router-link和router-view
			
	15.3.路由的细节处理
		1.默认路由: rediect
		2.mode: history模式
		3.router-link标签属性 -> tag/replace/active-class
		
	15.4.动态路由
		1.http://localhost:8080/user/zhangsan
			/user/:id
			this.$route.params.id;
			
		2.<!-- http://localhost:8080/profile?name=zhangsan&age=13&weight=1.56 -->
			query
			$route.query
			
	15.5.参数的传递
		1.params
		2.query -> URL
		3.URL:
			协议://主机:端口/路径?查询
			scheme://host:port/query#fragment
			
	15.6.路由嵌套
		index.js文件中创建VueRouter实例中配置路由和组件之间的映射关系routes
		除了path路径属性,component注册组件属性,还有
		children[]属性,里面可以有嵌套的路由对象
		
	15.5.导航守卫
		1.全局导航守卫
		2.路由独享守卫
		3.组件内守卫
		
	15.6.Keep-alive
		keep-alive离开当前组件不会被销毁,会一直保持存在,不会频繁的创建/销毁
		
十六、Promise
	16.1.promise的基本使用
		1.如何将异步操作放入Promise中
		2.(resolve,reject).then().catch()
		
	16.2.promise的链式调用
	
	16.3.promise的all方法
	
十七、Vuex
	17.1.什么是状态管理
	
	17.2.Vuex的基本使用
		1.state->直接修改(错误)
			至少要通过mutations里的方法,需要进行异步处理操作,还要先经过actions进行处理
		2.mutations
			默认参数state,即保存的状态
			Payload:使用mutations更新state时,可以携带一些参数被称为载荷(payload)
		3.actions
			用来代替mutations进行一些异步操作
			默认属性context:上下文->store对象,modules中的context指向自己这个对象
		4.getters
			类似于计算属性
		5.modules
			store模块化,数据分类/抽离
			
	12.3.Vuex的核心概念
		1.state->单一状态树
		2.getters
		3.mutations
		4.actions 异步操作(promise)
		5.modules
		
	12.4.Vuex的目录组织方式
	
十八、网络请求封装
	18.1.网络请求方式的选择(axios)
	
	18.2.axios的基本使用
		axios({
		  url: "/home/multidata",
		  method: "get",
		  /* 支持pormise,所以只需要用then/catch处理返回结果*/
		}).then(res => {
		  console.log(res)
		})
		
	18.3.axios的相关配置
		1.全局配置
			axios.defaults.baseURL = 'http://123.207.32.32:8000'
			axios.defaults.timeout = 5000
		2.局部配置
			可以创建axios实例,在每个实例中进行配置.其他实例互不影响
			
	18.4.axios的创建实例
		axios.create()
		
	18.5.axios的封装
	
	
	

	



